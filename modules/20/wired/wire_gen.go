// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package wired

import (
	"database/sql"
	"github.com/google/wire"
	"github.com/joaqu1m/goexpert-labs/modules/20/internal/infra/database"
	"github.com/joaqu1m/goexpert-labs/modules/20/internal/infra/database/mysql"
	"github.com/joaqu1m/goexpert-labs/modules/20/internal/infra/event"
	"github.com/joaqu1m/goexpert-labs/modules/20/internal/infra/web"
	"github.com/joaqu1m/goexpert-labs/modules/20/internal/usecase"
	"github.com/joaqu1m/goexpert-labs/modules/20/pkg/events"
)

// Injectors from wire.go:

func NewCreateOrderUseCase(db *sql.DB, eventDispatcher events.EventDispatcherInterface) *usecase.CreateOrderUseCase {
	orderRepository := mysql.NewOrderRepository(db)
	orderCreated := event.NewOrderCreated()
	createOrderUseCase := usecase.NewCreateOrderUseCase(orderRepository, eventDispatcher, orderCreated)
	return createOrderUseCase
}

func NewWebOrderHandler(db *sql.DB, eventDispatcher events.EventDispatcherInterface) *web.OrderHandler {
	orderRepository := mysql.NewOrderRepository(db)
	orderCreated := event.NewOrderCreated()
	orderHandler := web.NewOrderHandler(orderRepository, eventDispatcher, orderCreated)
	return orderHandler
}

// wire.go:

var setOrderRepositoryDependency = wire.NewSet(mysql.NewOrderRepository, wire.Bind(new(database.OrderRepositoryInterface), new(*mysql.OrderRepository)))

var setEventDispatcherDependency = wire.NewSet(events.NewEventDispatcher, wire.Bind(new(events.EventDispatcherInterface), new(*events.EventDispatcher)), event.NewOrderCreated, wire.Bind(new(events.EventInterface), new(*event.OrderCreated)))

var setOrderCreatedEvent = wire.NewSet(event.NewOrderCreated, wire.Bind(new(events.EventInterface), new(*event.OrderCreated)))
